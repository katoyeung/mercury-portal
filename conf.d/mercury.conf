lua_shared_dict my_logs 10m;
lua_shared_dict my_tokens 10m;

lua_package_path "/etc/nginx/lua-libraries/?.lua;/etc/nginx/lua-libraries/?/init.lua;/etc/nginx/lua-libraries/lua-resty-string/lib/?.lua;/etc/nginx/lua-libraries/lua-resty-hmac/lib/?.lua;/etc/nginx/lua-libraries/lua-resty-openssl/lib/?.lua;/etc/nginx/lua-libraries/lua-resty-validation/lib/?.lua;/etc/nginx/lua-libraries/lua-resty-jit-uuid/lib/?.lua;/etc/nginx/lua-libraries/lua-resty-jwt/lib/?.lua;/etc/nginx/lua-libraries/lua-resty-http/lib/?.lua;;";

lua_code_cache on;

init_by_lua_file /etc/nginx/lua-scripts/on_init.lua;
# rewrite_by_lua_file /etc/nginx/lua-scripts/on_rewrite.lua;
access_by_lua_file /etc/nginx/lua-scripts/on_access.lua;
log_by_lua_file /etc/nginx/lua-scripts/on_log.lua;

init_worker_by_lua_block {
    local log_flush_interval = 1  -- Time in seconds between log flushes

    local function flush_logs(premature)
        if premature then return end

        local log_buffer = ngx.shared.my_logs
        while true do
            -- Dequeue a log message from the list
            local log_json, err = log_buffer:lpop("logs")
            if not log_json then
                -- Break the loop if there are no more logs to process
                break
            end
            -- Log the message using Nginx's logging mechanism
            ngx.log(ngx.ERR, "Flushed log: ", log_json)
        end

        -- Register the timer again for the next flush
        local ok, err = ngx.timer.at(log_flush_interval, flush_logs)
        if not ok then
            ngx.log(ngx.ERR, "Failed to create timer: ", err)
        end
    end

    -- Start the initial timer when the worker process initializes
    local ok, err = ngx.timer.at(log_flush_interval, flush_logs)
    if not ok then
        ngx.log(ngx.ERR, "Failed to create initial timer: ", err)
    end
}
